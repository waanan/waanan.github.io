---
title: "线程的生命周期"
date: 2025-03-15T11:09:41+08:00
---

线程是进程中完全独立的一条执行流。因此，类似于人生的三大终极问题，“我是谁，从哪里来，到哪里去？”。本节来研究下，std::thread是什么，如何创建，以及如何结束。

***
## std::thread

std::thread是C++11中引入的一个类，用于表示一个线程。它提供了一种简单而又贴切的方式来创建和管理线程，使得多线程的编程直观且容易。

std::thread的构造函数，接受一个可调用的对象f（函数，lambda，函数对象等），以及该可调用对象需要的参数args。

当std::thread构造函数执行结束，立即启动实际的线程，以args作为参数，调用f。也就是说，在一条全新的执行流中，执行f(args)。

下面看几个例子：

```C++
#include <iostream>
#include <thread>

void f(int cnt)
{
	for (int i = 0; i < cnt; i++)
	{
		std::cout << "Thread 1 Run\n";
	}
}

class Foo
{
public:
	void bar(int cnt)
	{
		for (int i = 0; i < cnt; ++i)
		{
			std::cout << "Thread 2 Run\n";
		}
	}
};

int main()
{
	std::cout << "Start Two Thread!\n";
	std::thread t1(f, 2);   // 以简单函数启动线程
	Foo foo;
	std::thread t2(&Foo::bar, &foo, 3);  // 以class的成员函数来启动线程，需要额外多传一个对象指针，作为成员函数的this指针
	t1.join();  // 等待线程 t1 执行结束
	t2.join();  // 等待线程 t2 执行结束
	std::cout << "Two Thread Work Done\n";
	return 0;
}
```

在作者的机器上，这有如下的执行结果：

```C++
Start Two Thread!
Thread 1 Run
Thread 1 Run
Thread 2 Run
Thread 2 Run
Thread 2 Run
Two Thread Work Done
```

这里唯一要注意的是，当传递class的成员函数来启动线程时，除了该成员函数本身的参数要传递外，还要传递一个该class对象的指针，来作为这个成员函数的this指针。

***
## 以引用作为传入参数



***